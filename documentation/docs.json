{
  "swagger": "2.0",
  "info": {
    "description": "",
    "version": "1.0.0",
    "title": "Simple Advertisement Service"
  },
  "host": "localhost:8000",
  "basePath": "/",
  "tags": [
    {
      "name": "advertisement",
      "description": "Everything about your advertisement"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/api/advertisement/create/": {
      "post": {
        "tags": [
          "advertisement"
        ],
        "summary": "Add a new advertisement",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Advertisement object that needs to be added",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/advertisements/": {
      "get": {
        "tags": [
          "advertisement"
        ],
        "summary": "Return all advertisements from service sorted by date of adding",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "advertisements": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Advertisement"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/advertisements/ByTags/": {
      "get": {
        "tags": [
          "advertisement"
        ],
        "summary": "Finds Advertisements by tag",
        "description": "Multiple tag values can be provided with comma separated strings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "Tag values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Advertisement"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/api/advertisement/{advertisementId}/": {
      "get": {
        "tags": [
          "advertisement"
        ],
        "summary": "Find advertisement by ID",
        "description": "Returns a single advertisement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "advertisementId",
            "in": "path",
            "description": "ID of advertisement to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Advertisement"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Advertisement not found"
          }
        }
      },
      "put": {
        "tags": [
          "advertisement"
        ],
        "summary": "Update an existing advertisement",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "advertisementId",
            "in": "path",
            "description": "ID of advertisement to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Advertisement object that needs to be added",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Validation exception"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Advertisement not found"
          }
        }
      },
      "delete": {
        "tags": [
          "advertisement"
        ],
        "summary": "Deletes a advertisement",
        "description": "",
        "operationId": "deleteAdvertisement",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "advertisementId",
            "in": "path",
            "description": "Advertisement id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Advertisement not found"
          }
        }
      }
    },
    "/api/user/create/": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/login/": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The user to login.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "userName": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/auth/logout/": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/user/advertisements/": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Return all advertisement for logined user",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Advertisement"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "advertisements": {
          "type": "array",
          "description": "user's advertisements id",
          "items": {
            "$ref": "#/definitions/Advertisement/properties/id"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Advertisement": {
      "type": "object",
      "required": [
        "title",
        "text"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "example": "My advertisement"
        },
        "text": {
          "type": "string",
          "description": "Text of advertisement",
          "example": "It`s my advertisement"
        },
        "creation_date": {
          "type": "string",
          "format": "date-time"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "owner": {
          "$ref": "#/definitions/User/properties/username"
        }
      }
    }
  }
}